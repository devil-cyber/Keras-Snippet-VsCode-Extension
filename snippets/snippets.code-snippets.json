{
   "Keras-2.2.5 Import Template":{
        "prefix": "!impt",
        "body": [
            "import tensorflow as tf",
            "from tensorflow import keras",
            "from tensorflow.keras import layers",
            "from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dense,Dropout,Flatten",
            "from tensorflow.keras.models import Sequential",
            "from keras.layers.normalization import BatchNormalization",
            "from keras.preprocessing.image import ImageDataGenerator",
            "# This is a simple keras library import for CNN "
        ],
        "description": "Imports keras Important Library  for CNN"
    },
    "Keras-2.2.5 Simple CNN Template":{
        "prefix":"!cnn",
        "body":[
            "# This is a simple CNN template for Image Classification having labeled data in local storage",
            "# Fell free to update conv layer or the data according to your need",
            "import tensorflow as tf",
            "from tensorflow import keras",
            "from tensorflow.keras import layers",
            "from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dense,Dropout,Flatten",
            "from tensorflow.keras.models import Sequential",
            "from keras.layers.normalization import BatchNormalization",
            "from keras.preprocessing.image import ImageDataGenerator",
            "\n",
            "\n",
            "# Initialising the CNN",
            "classifier = Sequential()",
            "\n",
            "# Step 1 - Convolution",
            "classifier.add(Conv2D(6, (5, 5), input_shape=(64, 64, 3), activation='relu'))",
            "\n",
            "# Step 2 - Pooling",
            "classifier.add(MaxPooling2D(pool_size=(2, 2)))",
            "\n",
            "# Step 3 - Flattening",
            "classifier.add(Flatten())",
            "\n",
            "# Step 4 - Full connection",
            "classifier.add(Dense(120, activation='relu'))",
            "classifier.add(Dense(5, activation='softmax'))",
            "\n",
            "# Compiling the CNN",
            "classifier.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])",
            "\n",
            "train_datagen = ImageDataGenerator(rescale=1. / 255,rotation_range=40,width_range=.2,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.2,zoom_range=0.2,horizontal_flip=True,fill_mode='nearest')",
            "test_datagen = ImageDataGenerator(rescale=1. / 255)",
            "\n",
            "# Path to the image folder will contain images inside folder label according to your need. ",
            "training_set = train_datagen.flow_from_directory('Your Path',target_size=(64, 64),batch_size=32, )",
            "test_set = train_datagen.flow_from_directory('Your Path',target_size=(64, 64),batch_size=32, )",
            "\n",
            "# Now fit the model if you are using tf-version 1 then used fit_generator() at place of fit",
            "model = classifier.fit(training_set,steps_per_epoch=8000,epochs=10,validation_data=test_set,validation_steps=50)",
            "\n",
            "classifier.save('model.h5')",
            "print('Saved model to disk')"
        ],
        "description":"Creates a simple CNN snippet"
    },
    "Keras-2.2.5 Prediction Template":{
        "prefix":"!cnn-pred",
        "body":[
            "# The prediction step provide correct image path",
            "import numpy as np",
            "from keras.preprocessing import image",
            "test_image = image.load_img('image path', target_size=(64, 64))",
            "test_image = image.img_to_array(test_image)",
            "test_image = np.expand_dims(test_image, axis=0)",
            "result = model.predict(test_image)",
            "print(training_set.class_indices)",
            "if result[0][0] == 1:",
            "    prediction = 'Your class'"
        ]
    }
}

 